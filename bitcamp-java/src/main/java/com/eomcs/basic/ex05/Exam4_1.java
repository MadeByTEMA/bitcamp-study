// 비트 이동 연산자 : >>, >>>, << 
package com.eomcs.basic.ex05;

public class Exam4_1 {
    public static void main(String[] args) {
        // << 비트 이동 연산자 사용법
        // - 오른 쪽 빈자리 : 0으로 채운다.
        // - 왼쪽 경계를 넘어간 비트 : 짜른다.
      
        int i = 1;
        //     00000000 00000000 00000000 00000001 = 1 
        System.out.println(i << 1);
        //   0|0000000 00000000 00000000 00000001x
        //     0000000 00000000 00000000 000000010 = 2
        
        
        System.out.println(i << 2);
        //   0|0000000 00000000 00000000 0000001xx
        //     0000000 00000000 00000000 000000010 = 4
        
        System.out.println(i << 3);
        //   0|0000000 00000000 00000000 000001xxx
        //     0000000 00000000 00000000 000001000 = 8
        
        
        System.out.println(i << 4);
        //   0|0000000 00000000 00000000 00001xxxx
        //     0000000 00000000 00000000 000010000 = 16
        

        i = 0b0000_1011; // 11

        System.out.println(i << 1); // 22 => 00010110 // 0001011x => 00010110 => 22
        System.out.println(i << 2); // 44 => 00101100 // 001011xx => 00101100 => 44
        System.out.println(i << 3); // 88 => 01011000 // 01011xxx => 01011000 => 88
    }
}

// 왼쪽 이동
// - 1비트 이동은 곱하기 2 한 것과 같은 효과를 준다.
// - 값을 배수로 증가 시킬 때 곱하기 연산을 하는 것 보다
//   왼쪽 비트 이동 연산을 하는 것이 빠르기 때문에
//   실무에서는 이 비트 이동 연산을 자주 사용한다.